
Некоторое время назад я <a href="http://habrahabr.ru/post/148782/">писал</a> о том, как выбирал квартиру, используя при этом методы анализа данных. Тогда в комментариях выяснилось, что вопросы покупки и, особенно, съёма жилья беспокоят довольно много людей, особенно в таких городах как Москва и Санкт-Петербург. Именно таким людям и посвящён этот пост. Под катом анализ рынка аренды жилья для Москвы и ссылка на парсер для Спб. 

<habracut />

<h4>Парсер</h4>

Со времени публикации предыдущего поста парсер объявлений претерпел сильные изменения. 

Во-первых, теперь он умеет работать с сайтами rent-and-sale.ru (аренда квартир в Москве) и bn.ru (длительная аренда в Спб). Сохранилась и поддержка irr.by (как аренда, так и покупка квартир в Минске), кроме того, появилась возможность анализировать данные по офисам на основе информации с hata.by. 

Во-вторых, появилось два новых входных параметра - количество страниц результатов поиска и "ключевая точка". С первым всё понятно - он регулирует количество результатов, которые мы хотим использовать при анализе. Второй параметр - ключевая точка - это просто некий адрес (в том же городе, для которого проводится анализ), который по той или иной причине является важным для нас. Например, это может быть адрес работы, университета, детского сада или тёщи с блинами. Расстояние до этого места не используется напрямую при анализе, но может быть добавлено уже непосредственно при вычислении "хорошести" квартиры. Но об этом позже. 

Кстати про расстояния, и в это в-третьих, теперь они либо вычисляются точно (насколько это позволяет адрес), либо помечаются как Not Available, но никаких значений по умолчанию, взятых наугад. 

В-четвёртых, из-за увеличения количества параметров, подаваемых парсеру на вход, запускать его из коммандной строки стало неудобно. Поэтому парсер получил простейший графический интерфейс (выглядит жутко, но своё дело делает). Для любителей хардкора интерфейс коммандной строки также сохранён. Более подробно об этом можно прочитать на <a href="https://github.com/faithlessfriend/flatparser">странице проекта</a>. 

Однако наибольшее количество изменений претерпел список выходных параметров - переменных, непосредственно описывающих квартиры. Вот их полный список: 

price - как обычно, цена (для офисов - цена за метр квадратный)
kind - тип помещения, например, "офис" или "склад" (для квартир всегда будет равен NA)
clazz - класс жилья, например, "эконом" или "бизнесс"
room_no - количество комнат
size_t - size total, общая площадь
size_l - size living, жилая площадь
size_k - size kitchen, площадь кухни
dist_to_subway - расстояние до метро
dist_to_kp - расстояние до ключевой точки
state - состояние или ремонт
beds - количество спальных мест
furniture - наличие мебели
district - район (на данный момент не используется, предусмотрен для расширения)
subway - ближайшая станция метро (на данный момент не используется, предусмотрен для расширения)
floor - этаж
floors - этажность
year_built - год постройки
walls - материал стен
date - дата подачи объявления (на данный момент не используется)
address - адрес (для справки, в анализе не используется)
lat и lon - широта и долгота
url - URL страницы

Как видно из списка, добавлены такие немаловажные параметры как состояние квартиры и материал стен. К сожалению, не все сайты предоставляют подобную информацию; для сайтов, где этих данных нет, во всех рядах соответсвующих колонок будет красоваться значение NA. 


<h4>Предварительная обработка данных</h4>

Если вам лень запускать парсер, но при этом очень хочется посмотреть на графики вживую, в поддиректории script можно найти пример данных для сайта rent-and-sale.ru в файле rnsdataset.csv. В соседнем файле - rns.R - также находится весь R-код, необходимый для анализа. 

Прежде чем начать анализ, необходимо загрузить данные и привести их к удобному виду: 

  initial <- read.csv("rnsdataset.csv") 
  dat <- initial                        

В первой строке мы просто считываем данные из CSV-файла и сохраняем в переменную initial. Эта переменная будет хранить данные как они есть, без каких либо изменений. В качестве "рабочего" набора данных будем использовать переменную dat, в которую и копируем значение initial.

Дальше нам необходимо выбрать те атрибуты, которые могут быть использованы для анализа: 

  dat <- dat[c("price", "clazz", "room_no", "size_t", "size_l", 
             "dist_to_subway", "dist_to_kp", "state",
             "floor", "floors", "year_built", "walls")]

Кроме того, нас не интересуют колонки, для которых все значения равны NA, а также строки без указания цены. Избавляемся и от них:
		
  dat <- dat[, !apply(is.na(dat), 2, all)] 
  dat <- dat[!is.na(dat["price"]), ] 

Однако, в получившимся фрейме данных всё ещё присутствуют значения NA. Это не удивительно - мало для каких квартир указаны <em>все<em> параметры. Но для вычислений такие значения бесполезны. Существует несколько стратегий обработки значений NA. Самая простая из них - избавляться от всех записей, где есть хоть один неизвестный параметр. Но в нашем случае это приведёт к почти пустому набору данных, что нас, естественно, не устраивает. Другой подход - заменить неизвестные значения средним арифметическим известных. Создадим для этого функцию: 

  naToMean <- function(v) {
    m <- mean(v, na.rm = TRUE)
    v[is.na(v)] <- m
    v
  }

Эта функция принимает вектор, вычисляет среднее арифметическое (mean), заменяет на него все неизвестные значения и возвращает новый преобразованный вектор.


