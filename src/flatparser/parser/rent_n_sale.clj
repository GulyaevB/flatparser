
(ns flatparser.parser.rent-n-sale
  (:refer-clojure)
  (:use [net.cgrand enlive-html]
        [clojure pprint repl]
        [clojure.java io]
        [flatparser geo util]
        [flatparser.parser putil])
  (:require [clojure [string :as string]]))


(def subway-stations
  (distinct
   (list
    "Улица Подбельского"
    "Черкизовская"
    "Преображенская площадь"
    "Сокольники"
    "Красносельская"
    "Комсомольская"
    "Красные ворота"
    "Чистые пруды"
    "Лубянка"
    "Охотный ряд"
    "Библиотека имени Ленина"
    "Кропоткинская"
    "Парк Культуры"
    "Фрунзенская"
    "Спортивная"
    "Воробьёвы горы"
    "Университет"
    "Проспект Вернадского"
    "Юго-Западная"
    "Речной вокзал"
    "Водный стадион"
    "Войковская"
    "Сокол"
    "Аэропорт"
    "Динамо"
    "Белорусская"
    "Маяковская"
    "Тверская"
    "Театральная"
    "Новокузнецкая"
    "Павелецкая"
    "Автозаводская"
    "Коломенская"
    "Каширская"
    "Кантемировская"
    "Царицыно"
    "Орехово"
    "Домодедовская"
    "Красногвардейская"
    "Щёлковская"
    "Первомайская"
    "Измайловская"
    "Партизанская"
    "Семеновская"
    "Электрозаводская"
    "Бауманская"
    "Курская"
    "Площадь Революции"
    "Арбатская"
    "Смоленская"
    "Киевская"
    "Парк Победы"
    "Славянский бульвар"
    "Кунцевская"
    "Молодёжная"
    "Крылатское"
    "Строгино"
    "Мякинино"
    "Волоколамская"
    "Митино"
    "Александровский сад"
    "Арбатская"
    "Смоленская"
    "Киевская"
    "Выставочная"
    "Международная"
    "Студенческая"
    "Кутузовская"
    "Фили"
    "Багратионовская"
    "Филёвский парк"
    "Пионерская"
    "Кунцевская"
    "Парк культуры"
    "Октябрьская"
    "Добрынинская"
    "Павелецкая"
    "Таганская"
    "Курская"
    "Комсомольская"
    "Проспект Мира"
    "Новослободская"
    "Краснопресненская"
    "Киевская"
    "Медведково"
    "Бабушкинская"
    "Свиблово"
    "Ботанический сад"
    "ВДНХ"
    "Алексеевская"
    "Рижская"
    "Проспект Мира"
    "Сухаревская"
    "Тургеневская"
    "Китай-город"
    "Третьяковская"
    "Октябрьская"
    "Шаболовская"
    "Ленинский проспект"
    "Академическая"
    "Профсоюзная"
    "Новые Черёмушки"
    "Калужская"
    "Беляево"
    "Коньково"
    "Тёплый Стан"
    "Ясенево"
    "Новоясеневская"
    "Планерная"
    "Сходненская"
    "Тушинская"
    "Щукинская"
    "Октябрьское Поле"
    "Полежаевская"
    "Беговая"
    "Улица 1905 года"
    "Баррикадная"
    "Пушкинская"
    "Кузнецкий мост"
    "Таганская"
    "Пролетарская"
    "Волгоградский проспект"
    "Текстильщики"
    "Кузьминки"
    "Рязанский проспект"
    "Выхино"
    "Третьяковская"
    "Марксистская"
    "Площадь Ильича"
    "Авиамоторная"
    "Шоссе Энтузиастов"
    "Перово"
    "Новогиреево"
    "Алтуфьево"
    "Бибирево"
    "Отрадное"
    "Владыкино"
    "Петровско-Разумовская"
    "Тимирязевская"
    "Дмитровская"
    "Савёловская"
    "Менделеевская"
    "Цветной бульвар"
    "Чеховская"
    "Боровицкая"
    "Полянка"
    "Серпуховская"
    "Тульская"
    "Нагатинская"
    "Нагорная"
    "Нахимовский проспект"
    "Севастопольская"
    "Чертановская"
    "Южная"
    "Пражская"
    "Улица Академика Янгеля"
    "Аннино"
    "Бульвар Дмитрия Донского"
    "Марьина Роща"
    "Достоевская"
    "Трубная"
    "Сретенский бульвар"
    "Чкаловская"
    "Римская"
    "Крестьянская застава"
    "Дубровка"
    "Кожуховская"
    "Печатники"
    "Волжская"
    "Люблино"
    "Братиславская"
    "Марьино"
    "Борисово"
    "Шипиловская"
    "Зябликово"
    "Каширская"
    "Варшавская"
    "Каховская"
    "Улица Старокачаловская"
    "Улица Скобелевская"
    "Бульвар Адмирала Ушакова"
    "Улица Горчакова"
    "Бунинская аллея"
    "Тимирязевская"
    "Улица Милашенкова"
    "Телецентр"
    "Улица Академика Королёва"
    "Выставочный центр"
    "Улица Сергея Эйзенштейна")))

(def subway-coords-msk
  [[55.814525 37.73426] [55.803943 37.744766] [55.796241 37.715477] [55.80461469999999 37.6790236] [55.779994 37.66608] [55.7749606 37.657539] [55.769081 37.649108] [55.764926 37.638435] [55.75965799999999 37.626579] [55.757877 37.616634] [55.752254 37.610492] [55.745155 37.603031] [55.735206 37.593074] [55.7255389 37.587291] [55.6099489 37.6679895] [55.71041100000001 37.559421] [55.69255 37.534591] [55.6768385 37.4999825] [55.663749 37.48314999999999] [55.855056 37.476108] [55.83301299999999 37.482373] [55.819088 37.49789] [55.8054 37.5039] [55.80458969999999 37.5427282] [55.789714 37.558185] [55.777095 37.581848] [55.770126 37.595932] [55.76402770000001 37.6055413] [55.7570905 37.6208815] [55.73566229999999 37.6328365] [55.7125679 37.6461215] [55.704223 37.630771] [55.6787286 37.701839] [55.655136 37.648845] [55.63745729999999 37.6606423] [55.628584 37.6527372] [55.613197 37.694965] [55.608976 37.7091135] [55.613864 37.744545] [55.809284 37.798629] [55.7928468 37.796073] [55.7931792 37.7749855] [55.7374855 37.4081035] [55.7790444 37.704757] [55.78105499999999 37.70527999999999] [55.7712215 37.6777375] [55.68133419999999 37.7341926] [55.75656799999999 37.621654] [55.752159 37.601516] [55.7486688 37.5833055] [55.7399016 37.551872] [55.736217 37.516838] [55.7259475 37.469951] [55.7304314 37.4183336] [55.883426 37.415233] [55.7544611 37.4336278] [55.7891693 37.3943994] [55.825477 37.385368] [55.83575 37.381988] [55.86499999999999 37.3625] [55.752288 37.60866499999999] [55.749156 37.543834] [55.7439845 37.6858078] [55.74119719999999 37.545139] [55.740005 37.534378] [55.743713 37.5138078] [55.743793 37.497741] [55.74944439999999 37.50138889999999] [55.736038 37.467067] [55.735206 37.593074] [55.7921963 37.6135995] [55.728984 37.622779] [55.73932689999999 37.663199] [55.811275 37.640752] [55.7854062 37.5959525] [55.7533004 37.5559453] [55.887207 37.661472] [55.869533 37.664207] [55.8519444 37.6319444] [55.84534 37.63871] [55.82106 37.641475] [55.80777699999999 37.638694] [55.7939136 37.633205] [55.7733567 37.63503000000001] [55.765838 37.636772] [55.75695 37.630935] [55.74073 37.625587] [55.71881800000001 37.608139] [55.6852652 37.5401514] [55.687912 37.573532] [55.6488704 37.5333644] [55.670387 37.554718] [55.657165 37.540428] [55.642601 37.526451] [55.6471643 37.5284823] [55.6343177 37.50086599999999] [55.6169048 37.5495192] [55.601905 37.55286] [55.86329749999999 37.43338] [55.8431321 37.43872880000001] [55.8273873 37.4449113] [55.8089421 37.4740825] [55.793521 37.493537] [55.777523 37.5195] [55.7790464 37.5595644] [55.76543280000001 37.5598025] [55.7612892 37.581617] [55.764953 37.60590699999999] [55.7626196 37.6117158] [55.73171199999999 37.666366] [55.709875 37.744806] [55.7165023 37.7338563] [55.6988889 37.7697222] [55.720046 37.779941] [55.71611799999999 37.817089] [55.7365803 37.6615209] [55.74682199999999 37.680965] [55.7495697 37.719284] [55.7594658 37.761411] [55.7411111 37.7747222] [55.7497222 37.8133333] [55.897865 37.58708499999999] [55.8986364 37.6076036] [55.8618321 37.5920698] [55.847248 37.589851] [55.7945472 37.56130599999999] [55.8205947 37.561128] [55.807903 37.57822] [55.794521 37.590199] [55.7066693 37.5273877] [55.7711372 37.6203993] [55.765892 37.608306] [55.748771 37.611213] [55.736801 37.618579] [55.7300718 37.6245115] [55.708675 37.622421] [55.6840122 37.6564128] [55.676782 37.602987] [55.6722893 37.5854055] [55.65131700000001 37.598339] [55.61855449999999 37.5954605] [55.74853940000001 37.8618858] [55.612323 37.604171] [55.5966992 37.58983] [55.5831703 37.2588235] [55.5662133 37.5762855] [55.79937469999999 37.6118986] [55.781318 37.613788] [55.7700568 37.62502449999999] [55.7667516 37.634273] [55.756027 37.659393] [55.746688 37.679508] [55.732276 37.665519] [55.71783 37.676631] [55.7071342 37.9129083] [55.70055559999999 37.71722219999999] [55.690906 37.753322] [55.67899999999999 37.74919999999999] [55.65757499999999 37.759639] [55.6538889 37.7133333] [55.633464 37.744071] [55.6198115 37.7254575] [55.621534 37.74453310000001] [55.653343 37.619964] [55.653076 37.598476] [55.569343 37.576515] [55.54814099999999 37.55466] [55.54820119999999 37.5514318] [55.5468549 37.5273893] [55.5420183 37.5125896] [55.82573859999999 37.5853705] [55.821819 37.608924] [55.8210396 37.6184503] [55.82405000000001 37.638473] [55.8326224 37.64158949999999]])


(def param-names
  {:clazz "Класс:"
   :room_no "Количество комнат:"
   :size_t "Общая площадь:"
   :size_l "Жилая площадь:"
   :size_k "Площадь кухни:"
   :state "Состояние:"
   :floor "Этаж:"
   :year_built "Год постройки:"
   :floors "Этажей:"
   :furniture "Мебель:"
   :beds "Спальных мест:"
   })


(defn fetch-address [rsrc]
  (let [full-addr-str (get-content (first (select rsrc [:div.spanLocView])))
        i0 (.indexOf full-addr-str ",")
        i1 (.indexOf full-addr-str "," (+ i0 1))
        i2 (.indexOf full-addr-str "," (+ i1 1))
        addr-str (subs full-addr-str (+ i2 1))]
    (string/trim addr-str)))


(defn fetch-dist-to-subway [rsrc]
  (let [content (get-content (first (select rsrc [:.metroImg])))]
    (if (or (nil? content) (empty? content))
      NA
      (let [dist-str (last (.split content ","))]
        (cond 
         (or (nil? dist-str) (empty? dist-str)) NA
         :else (parse-int (.trim dist-str)))))))


(defn fetch-price [rsrc]
  (parse-int (get-content
              (first (select rsrc [:table.headerValueTable :td :span])))))

(defn parse-clazz [clazz-str]
  (case (.toLowerCase clazz-str)
    "эконом" :econom
    "бизнес" :business
    "элитный" :elite
    NA))

(defn parse-state [state-str]
  (if (nil? state-str)
    NA
    (case (.toLowerCase state-str)
      "нормальное состояние" :normal
      "после ремонта" :good
      "евро ремонт" :good
      "авторский дизайн" :good
      "нужен капитальный ремонт" :bad
      "нужен косметический ремонт" :bad
      "без отделки" :bad
      "с отделкой" :good
      NA)))

(defn parse-furniture [furniture-str]
  (if furniture-str
    (case (.toLowerCase furniture-str)
      "нет" 0
      "есть" 1
      NA)
    NA))


(defn parse-dist-to-kp [addr kp]
  (if kp
    (distance (coords-by-addr (str "Россия, Москва, " addr))
              (coords-by-addr (str "Россия, Москва, " kp)))
    NA))


(defn fetch-params
  "Takes parsed HTML resource of page with flat description
   map of additional information. 
   Returns map with found/calcuated params"
  [rsrc info]
  (let [names (map get-content (select rsrc [:div.x2 :th]))
        values (map get-content (select rsrc [:div.x2 :td]))
        p-map (zipmap names values)
        addr (fetch-address rsrc)
        coords (coords-by-addr (str "Россия, Москва, " addr))]
    {:price (fetch-price rsrc)
     :address addr
     :lat (first coords)
     :lon (second coords)
     ;; :dist_to_subway (fetch-dist-to-subway rsrc)
     :dist_to_subway (nearest-subway subway-coords-msk coords)
     :dist_to_kp (parse-dist-to-kp addr (:kp info))
     :clazz (parse-clazz (p-map (param-names :clazz)))
     :room_no (parse-int (p-map (param-names :room_no)))
     :size_t (parse-double (p-map (param-names :size_t)))
     :size_l (parse-double (p-map (param-names :size_l)))
     :size_k (parse-double (p-map (param-names :size_k)))
     :state (parse-state (p-map (param-names :state)))
     :floor (parse-int (p-map (param-names :floor)))
     :floors (parse-int (p-map (param-names :floors)))
     :year_built (parse-int (p-map (param-names :year_built)))
     :furniture (parse-furniture (p-map (param-names :furniture)))
     :beds (parse-int (p-map (param-names :beds)))
     }))


(defn fetch-links [rsrc]
  (map (comp #(str "http://rent-and-sale.ru" %) :href :attrs)
       (select rsrc [:div.photo :a])))


(defn collect-from
  "Collects data from 1 page of search results"
  [url info]
  (map #(do (println "Fetching params from:" %)
            (merge (fetch-params (make-resource %) info) {:url %}))
       (fetch-links (make-resource url))))

(defn collect-data
  "Takes URL of first page of search results
   and collects data from n first pages"
  [url-p1 n info]
  (let [list-pages (cons url-p1 (map #(str url-p1 "&pageno" %)
                                     (range 1 n)))]
    (apply concat (map #(collect-from % info) list-pages))))